df1 <- eventReactive(input$clicks, {data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from stormevent2014"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mew2795', PASS='orcl_mew2795', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE)))
df1 <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from stormevent2014"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mew2795', PASS='orcl_mew2795', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE)))
end
df1 <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from stormevent2014"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mew2795', PASS='orcl_mew2795', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE)))
source('~/DataVisualization/DV_FinalProject/01 Data/AScript.R', echo=TRUE)
require("jsonlite")
require("RCurl")
require(ggplot2)
require(dplyr)
require(shiny)
require(shinydashboard)
require(leaflet)
require(gridExtra)
df1 <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from stormevent2014"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mew2795', PASS='orcl_mew2795', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE)))
require("jsonlite")
require("RCurl")
require(ggplot2)
require(dplyr)
require(shiny)
require(shinydashboard)
require(leaflet)
require(gridExtra)
df1 <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from stormevent2014"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mew2795', PASS='orcl_mew2795', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE)))
require("jsonlite")
require("RCurl")
require(ggplot2)
require(dplyr)
require(shiny)
require(shinydashboard)
require(leaflet)
require(gridExtra)
df1 <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from STORMEVENT2014"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mew2795', PASS='orcl_mew2795', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE)))
require("jsonlite")
require("RCurl")
require(ggplot2)
require(dplyr)
require(shiny)
require(shinydashboard)
require(leaflet)
require(gridExtra)
df1 <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from STORMEVENT2015"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mew2795', PASS='orcl_mew2795', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE)))
df1 <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from STORMEVENT2015"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mew2795', PASS='orcl_mew2795', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE)))
head(df)
df <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from STORMEVENT2011"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_Mew2795', PASS='orcl_Mew2795', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
require(jsonlite)
require(RCurl)
require(ggplot2)
require(dplyr)
require(shiny)
require(shinydashboard)
require(leaflet)
require(gridExtra)
df <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from STORMEVENT2011"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_Mew2795', PASS='orcl_Mew2795', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
require(jsonlite)
require(RCurl)
require(ggplot2)
require(dplyr)
require(shiny)
require(shinydashboard)
require(leaflet)
require(gridExtra)
df <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from STORMEVENTS2011"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_Mew2795', PASS='orcl_Mew2795', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
head(df)
df <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from STORMEVENTS2011"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mew2795', PASS='orcl_mew2795', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
df <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from STORMEVENTS2011"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mew2795', PASS='orcl_mew2795', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
df2011 <- df
df2012 <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from STORMEVENTS2012"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mew2795', PASS='orcl_mew2795', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
df2013 <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from STORMEVENTS2013"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mew2795', PASS='orcl_mew2795', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
df2014 <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from STORMEVENTS2014"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mew2795', PASS='orcl_mew2795', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
df2011 <- select(STATE, DAMAGE_CROPS, DAMAGE_PROPERTY, BEGIN_TIME, END_TIME, YEAR, INJURIES_DIRECT, INJURIES_INDIRECT, DEATHS_DIRECT, DEATHS_INDIRECT, MAGNITUDE)
df2011 <- select(STATE_FIPS, DAMAGE_CROPS, DAMAGE_PROPERTY, BEGIN_TIME, END_TIME, YEAR, INJURIES_DIRECT, INJURIES_INDIRECT, DEATHS_DIRECT, DEATHS_INDIRECT, MAGNITUDE)
df2011 <- select(STATE_FIPS, DAMAGE_CROPS, DAMAGE_PROPERTY, BEGIN_TIME, END_TIME, YEAR, INJURIES_DIRECT, INJURIES_INDIRECT, DEATHS_DIRECT, DEATHS_INDIRECT, MAGNITUDE)
df2011 <- select(., STATE_FIPS, DAMAGE_CROPS, DAMAGE_PROPERTY, BEGIN_TIME, END_TIME, YEAR, INJURIES_DIRECT, INJURIES_INDIRECT, DEATHS_DIRECT, DEATHS_INDIRECT, MAGNITUDE)
df2011 <- df2011 %>% select(STATE_FIPS, DAMAGE_CROPS, DAMAGE_PROPERTY, BEGIN_TIME, END_TIME, YEAR, INJURIES_DIRECT, INJURIES_INDIRECT, DEATHS_DIRECT, DEATHS_INDIRECT, MAGNITUDE)
head(df2011)
df2014 <- df2014 %>% select(STATE_FIPS, DAMAGE_CROPS, DAMAGE_PROPERTY, BEGIN_TIME, END_TIME, YEAR, INJURIES_DIRECT, INJURIES_INDIRECT, DEATHS_DIRECT, DEATHS_INDIRECT, MAGNITUDE)
df2012 <- df2012 %>% select(STATE_FIPS, DAMAGE_CROPS, DAMAGE_PROPERTY, BEGIN_TIME, END_TIME, YEAR, INJURIES_DIRECT, INJURIES_INDIRECT, DEATHS_DIRECT, DEATHS_INDIRECT, MAGNITUDE)
df2013 <- df2013 %>% select(STATE_FIPS, DAMAGE_CROPS, DAMAGE_PROPERTY, BEGIN_TIME, END_TIME, YEAR, INJURIES_DIRECT, INJURIES_INDIRECT, DEATHS_DIRECT, DEATHS_INDIRECT, MAGNITUDE)
View(df1)
View(df1)
55 %% 10
54%%10
54 %/% 10
df2011 <- df2011 %>% select(STATE_FIPS, DAMAGE_CROPS, DAMAGE_PROPERTY, BEGIN_TIME, END_TIME, YEAR, INJURIES_DIRECT, INJURIES_INDIRECT, DEATHS_DIRECT, DEATHS_INDIRECT, MAGNITUDE) %>% mutate(END = ((END_TIME %% 100) + (END_TIME %/% 100)), BEGIN = ((BEGIN_TIME %% 100) + (BEGIN_TIME %/% 100))) %>% mutate (DAMAGE_KPI = (DAMAGE_CROPS + DAMAGE_PROPERTY) / (END - BEGIN))
df2011 <- df2011 %>% select(STATE_FIPS, DAMAGE_CROPS, DAMAGE_PROPERTY, BEGIN_TIME, END_TIME, YEAR, INJURIES_DIRECT, INJURIES_INDIRECT, DEATHS_DIRECT, DEATHS_INDIRECT, MAGNITUDE) %>% mutate(END = ((as.numeric(END_TIME) %% 100) + (as.numeric(END_TIME) %/% 100)), BEGIN = ((as.numeric(BEGIN_TIME) %% 100) + (as.numeric(BEGIN_TIME) %/% 100))) %>% mutate (DAMAGE_KPI = (as.numeric(DAMAGE_CROPS) + as.numeric(DAMAGE_PROPERTY)) / (END - BEGIN))
head(df2011)
df2011 <- df2011 %>% select(STATE_FIPS, DAMAGE_CROPS, DAMAGE_PROPERTY, BEGIN_TIME, END_TIME, YEAR, INJURIES_DIRECT, INJURIES_INDIRECT, DEATHS_DIRECT, DEATHS_INDIRECT, MAGNITUDE) %>% mutate(END = ((as.numeric(END_TIME) %% 100) + (as.numeric(END_TIME) %/% 100)), BEGIN = ((as.numeric(BEGIN_TIME) %% 100) + (as.numeric(BEGIN_TIME) %/% 100))) %>% mutate (DAMAGE_KPI = (as.numeric(DAMAGE_CROPS) + as.numeric(DAMAGE_PROPERTY)) / (END - BEGIN)) %>% filter(DAMAGE_KPI != "inf")
head(df2011)
df2011 <- df2011 %>% select(STATE_FIPS, DAMAGE_CROPS, DAMAGE_PROPERTY, BEGIN_TIME, END_TIME, YEAR, INJURIES_DIRECT, INJURIES_INDIRECT, DEATHS_DIRECT, DEATHS_INDIRECT, MAGNITUDE) %>% mutate(END = ((as.numeric(END_TIME) %% 100) + (as.numeric(END_TIME) %/% 100)), BEGIN = ((as.numeric(BEGIN_TIME) %% 100) + (as.numeric(BEGIN_TIME) %/% 100))) %>% mutate (DAMAGE_KPI = (as.numeric(DAMAGE_CROPS) + as.numeric(DAMAGE_PROPERTY)) / (END - BEGIN)) %>% filter(DAMAGE_KPI != "Inf")
head(df2011)
df2011 <- df2011 %>% select(STATE_FIPS, DAMAGE_CROPS, DAMAGE_PROPERTY, BEGIN_TIME, END_TIME, YEAR, INJURIES_DIRECT, INJURIES_INDIRECT, DEATHS_DIRECT, DEATHS_INDIRECT, MAGNITUDE) %>% mutate(END = ((as.numeric(END_TIME) %% 100) + (as.numeric(END_TIME) %/% 100 * 100)), BEGIN = ((as.numeric(BEGIN_TIME) %% 100) + (as.numeric(BEGIN_TIME) %/% 100 * 100))) %>% mutate (DAMAGE_KPI = (as.numeric(DAMAGE_CROPS) + as.numeric(DAMAGE_PROPERTY)) / (END - BEGIN)) %>% filter(DAMAGE_KPI != "Inf")
head(df2011)
df2011 <- df2011 %>% select(STATE_FIPS, DAMAGE_CROPS, DAMAGE_PROPERTY, BEGIN_TIME, END_TIME, YEAR, INJURIES_DIRECT, INJURIES_INDIRECT, DEATHS_DIRECT, DEATHS_INDIRECT, MAGNITUDE) %>% mutate(END = ((as.numeric(END_TIME) %% 100) + (as.numeric(END_TIME) %/% 100 * 100)), BEGIN = ((as.numeric(BEGIN_TIME) %% 100) + (as.numeric(BEGIN_TIME) %/% 100 * 100))) %>% mutate (DAMAGE_KPI = (as.numeric(DAMAGE_CROPS) + as.numeric(DAMAGE_PROPERTY)) / (END - BEGIN)) %>% filter(DAMAGE_KPI != "Inf", DAMAGE_KPI > 0)
head(df2011)
df2012 <- df2012 %>% select(STATE_FIPS, DAMAGE_CROPS, DAMAGE_PROPERTY, BEGIN_TIME, END_TIME, YEAR, INJURIES_DIRECT, INJURIES_INDIRECT, DEATHS_DIRECT, DEATHS_INDIRECT, MAGNITUDE) %>% mutate(END = ((as.numeric(END_TIME) %% 100) + (as.numeric(END_TIME) %/% 100 * 100)), BEGIN = ((as.numeric(BEGIN_TIME) %% 100) + (as.numeric(BEGIN_TIME) %/% 100 * 100))) %>% mutate (DAMAGE_KPI = (as.numeric(DAMAGE_CROPS) + as.numeric(DAMAGE_PROPERTY)) / (END - BEGIN)) %>% filter(DAMAGE_KPI != "Inf", DAMAGE_KPI > 0)
df2013 <- df2013 %>% select(STATE_FIPS, DAMAGE_CROPS, DAMAGE_PROPERTY, BEGIN_TIME, END_TIME, YEAR, INJURIES_DIRECT, INJURIES_INDIRECT, DEATHS_DIRECT, DEATHS_INDIRECT, MAGNITUDE) %>% mutate(END = ((as.numeric(END_TIME) %% 100) + (as.numeric(END_TIME) %/% 100 * 100)), BEGIN = ((as.numeric(BEGIN_TIME) %% 100) + (as.numeric(BEGIN_TIME) %/% 100 * 100))) %>% mutate (DAMAGE_KPI = (as.numeric(DAMAGE_CROPS) + as.numeric(DAMAGE_PROPERTY)) / (END - BEGIN)) %>% filter(DAMAGE_KPI != "Inf", DAMAGE_KPI > 0)
df2014 <- df2014 %>% select(STATE_FIPS, DAMAGE_CROPS, DAMAGE_PROPERTY, BEGIN_TIME, END_TIME, YEAR, INJURIES_DIRECT, INJURIES_INDIRECT, DEATHS_DIRECT, DEATHS_INDIRECT, MAGNITUDE) %>% mutate(END = ((as.numeric(END_TIME) %% 100) + (as.numeric(END_TIME) %/% 100 * 100)), BEGIN = ((as.numeric(BEGIN_TIME) %% 100) + (as.numeric(BEGIN_TIME) %/% 100 * 100))) %>% mutate (DAMAGE_KPI = (as.numeric(DAMAGE_CROPS) + as.numeric(DAMAGE_PROPERTY)) / (END - BEGIN)) %>% filter(DAMAGE_KPI != "Inf", DAMAGE_KPI > 0)
df_comp <- bind_rows(df2011, df2012, df2013, df2014)
head(df_comp)
View(df_comp)
head(df_comp[DAMAGE_KPI])
head(df_comp(DAMAGE_KPI))
head(select(df_comp, DAMAGE_KPI))
head(select(df_comp, as.numeric(DAMAGE_KPI)))
require(tidyr)
require(dplyr)
require(ggplot2)
df <- df_comp
measures <- c("STATE_FIPS", "DAMAGE_CROPS", "DAMAGE_PROPERTY", "BEGIN_TIME", "END_TIME", "YEAR", "INJURIES_DIRECT", "INJURIES_INDIRECT", "DEATHS_DIRECT", "DEATHS_INDIRECT", "MAGNITUDE")
library(lubridate)
write.csv(df, paste(gsub(".csv", "", "AdamData"), ".reformatted2.csv", sep=""), row.names=FALSE, na = "")
tableName <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", tableName, "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
tableName <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", "AdamData")))
sql <- paste("CREATE TABLE", tableName, "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
df_comp <- df_comp %>% mutate(DAMAGE_KPI = as.numeric(DAMAGE_KPI))
write.csv(df, paste(gsub(".csv", "", "AdamData"), ".reformatted2.csv", sep=""), row.names=FALSE, na = "")
df <- df_comp
write.csv(df, paste(gsub(".csv", "", "AdamData"), ".reformatted2.csv", sep=""), row.names=FALSE, na = "")
df_comp <- df_comp %>% mutate(DAMAGE_KPI = as.numeric(DAMAGE_KPI))
df <- df_comp
write.csv(df, paste(gsub(".csv", "", "AdamData"), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
df_comp <- df_comp %>% mutate(DAMAGE_KPI = as.numeric(DAMAGE_KPI), STATE_FIPS = as.numeric(STATE_FIPS))
df <- df_comp
library(lubridate)
write.csv(df, paste(gsub(".csv", "", "AdamData"), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
df_comp <- df_comp %>% mutate(DAMAGE_KPI = as.numeric(DAMAGE_KPI), STATE_FIPS = as.numeric(STATE_FIPS)) %>% filter(DAMAGE_KPI > 1)
df <- df_comp
write.csv(df, paste(gsub(".csv", "", "AdamData"), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
require(tidyr)
require(dplyr)
require(ggplot2)
setwd("~/DataVisualization/DV_FinalProject")
require(tidyr)
require(dplyr)
require(ggplot2)
setwd("~/DataVisualization/DV_FinalProject")
file_path <- "AdamData.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
str(df)
View(df_comp)
require(lubridate)
str(df_comp)
measures <- c("STATE_FIPS", "DAMAGE_CROPS", "DAMAGE_PROPERTY", "BEGIN_TIME", "END_TIME", "YEAR", "INJURIES_DIRECT", "INJURIES_INDIRECT", "DEATHS_DIRECT", "DEATHS_INDIRECT", "MAGNITUDE", "END", "BEGIN", "DAMAGE_KPI")
measures <- c("STATE_FIPS", "DAMAGE_CROPS", "DAMAGE_PROPERTY", "BEGIN_TIME", "END_TIME", "YEAR", "INJURIES_DIRECT", "INJURIES_INDIRECT", "DEATHS_DIRECT", "DEATHS_INDIRECT", "MAGNITUDE", "END", "BEGIN", "DAMAGE_KPI")
tableName <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", "AdamData")))
sql <- paste("CREATE TABLE", tableName, "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
setwd("~/DataVisualization/DV_FinalProject")
dfState <- read.csv("Fips.csv", stringsAsFactors = FALSE)
View(dfState)
df_comp2 <- left_join(df_comp, dfState)
View(df_comp)
df_comp2 <- left_join(df_comp, dfState, by = "STATE_FIPS")
dfState <- dfState %>% mutate(STATE_FIPS = as.numeric(STATE_FIPS))
dfState <- read.csv("Fips.csv", stringsAsFactors = FALSE)
View(dfState)
dfState <- dfState %>% mutate(STATE_FIPS = as.numeric(STATE_FIPS))
df_comp2 <- left_join(df_comp, dfState, by = "STATE_FIPS")
View(df_comp2)
dimensions <- setdiff(names(df), measures)
tableName <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", "AdamData")))
sql <- paste("CREATE TABLE", tableName, "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
tableName <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", "AdamData")))
sql <- paste("CREATE TABLE", "AdamData", "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
df <- df_comp2
tableName <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", "AdamData")))
sql <- paste("CREATE TABLE", "AdamData", "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
df_comp2 <- left_join(df_comp, dfState, by = "STATE_FIPS")
View(df_comp2)
df <- df_comp2
measures <- c("STATE_FIPS", "DAMAGE_CROPS", "DAMAGE_PROPERTY", "BEGIN_TIME", "END_TIME", "YEAR", "INJURIES_DIRECT", "INJURIES_INDIRECT", "DEATHS_DIRECT", "DEATHS_INDIRECT", "MAGNITUDE", "END", "BEGIN", "DAMAGE_KPI")
dimensions <- setdiff(names(df), measures)
tableName <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", "AdamData")))
sql <- paste("CREATE TABLE", "AdamData", "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
write.csv(df, paste(gsub(".csv", "", "AdamData"), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
require(jsonlite)
require(RCurl)
require(ggplot2)
require(dplyr)
require(shiny)
require(shinydashboard)
require(leaflet)
require(gridExtra)
require(lubridate)
df <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from ADAMDATA"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mew2795', PASS='orcl_mew2795', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
View(df)
df <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from ADAMDATA"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mew2795', PASS='orcl_mew2795', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
View(df_comp2)
View(df_comp)
View(df)
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="null",replacement= "0"))
}
}
df <- df_comp2
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="null",replacement= "0"))
}
}
View(df)
write.csv(df, paste(gsub(".csv", "", "AdamData"), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
df <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from ADAMDATA"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mew2795', PASS='orcl_mew2795', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
df <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from ADAMDATA"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mew2795', PASS='orcl_mew2795', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
df <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from ADAMDATA"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mew2795', PASS='orcl_mew2795', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
View(df)
dftest <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from ADAMDATA"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mew2795', PASS='orcl_mew2795', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
dfCross <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from ADAMDATA"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mew2795', PASS='orcl_mew2795', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
dfCross <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from ADAMDATA"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mew2795', PASS='orcl_mew2795', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
View(dfCross)
df2011 <- df2011 %>% select(STATE_FIPS, DAMAGE_CROPS, DAMAGE_PROPERTY, BEGIN_TIME, END_TIME, YEAR, INJURIES_DIRECT, INJURIES_INDIRECT, DEATHS_DIRECT, DEATHS_INDIRECT, MAGNITUDE) %>% mutate(END = ((as.numeric(END_TIME) %% 100)/60 + (as.numeric(END_TIME) %/% 100 * 100)), BEGIN = ((as.numeric(BEGIN_TIME) %% 100)/60 + (as.numeric(BEGIN_TIME) %/% 100 * 100))) %>% mutate (DAMAGE_KPI = (as.numeric(DAMAGE_CROPS) + as.numeric(DAMAGE_PROPERTY)) / (END - BEGIN)) %>% filter(DAMAGE_KPI != "Inf", DAMAGE_KPI > 0)
df2012 <- df2012 %>% select(STATE_FIPS, DAMAGE_CROPS, DAMAGE_PROPERTY, BEGIN_TIME, END_TIME, YEAR, INJURIES_DIRECT, INJURIES_INDIRECT, DEATHS_DIRECT, DEATHS_INDIRECT, MAGNITUDE) %>% mutate(END = ((as.numeric(END_TIME) %% 100)/60 + (as.numeric(END_TIME) %/% 100 * 100)), BEGIN = ((as.numeric(BEGIN_TIME) %% 100)/60 + (as.numeric(BEGIN_TIME) %/% 100 * 100))) %>% mutate (DAMAGE_KPI = (as.numeric(DAMAGE_CROPS) + as.numeric(DAMAGE_PROPERTY)) / (END - BEGIN)) %>% filter(DAMAGE_KPI != "Inf", DAMAGE_KPI > 0)
df2013 <- df2013 %>% select(STATE_FIPS, DAMAGE_CROPS, DAMAGE_PROPERTY, BEGIN_TIME, END_TIME, YEAR, INJURIES_DIRECT, INJURIES_INDIRECT, DEATHS_DIRECT, DEATHS_INDIRECT, MAGNITUDE) %>% mutate(END = ((as.numeric(END_TIME) %% 100)/60 + (as.numeric(END_TIME) %/% 100 * 100)), BEGIN = ((as.numeric(BEGIN_TIME) %% 100)/60 + (as.numeric(BEGIN_TIME) %/% 100 * 100))) %>% mutate (DAMAGE_KPI = (as.numeric(DAMAGE_CROPS) + as.numeric(DAMAGE_PROPERTY)) / (END - BEGIN)) %>% filter(DAMAGE_KPI != "Inf", DAMAGE_KPI > 0)
df2014 <- df2014 %>% select(STATE_FIPS, DAMAGE_CROPS, DAMAGE_PROPERTY, BEGIN_TIME, END_TIME, YEAR, INJURIES_DIRECT, INJURIES_INDIRECT, DEATHS_DIRECT, DEATHS_INDIRECT, MAGNITUDE) %>% mutate(END = ((as.numeric(END_TIME) %% 100)/60 + (as.numeric(END_TIME) %/% 100 * 100)), BEGIN = ((as.numeric(BEGIN_TIME) %% 100)/60 + (as.numeric(BEGIN_TIME) %/% 100 * 100))) %>% mutate (DAMAGE_KPI = (as.numeric(DAMAGE_CROPS) + as.numeric(DAMAGE_PROPERTY)) / (END - BEGIN)) %>% filter(DAMAGE_KPI != "Inf", DAMAGE_KPI > 0)
source('~/DataVisualization/DV_FinalProject/01 Data/AScript.R', echo=TRUE)
dfState <- read.csv("Fips.csv", stringsAsFactors = FALSE)
dfState <- dfState %>% mutate(STATE_FIPS = as.numeric(STATE_FIPS))
df_comp <- bind_rows(df2011, df2012, df2013, df2014)
df_comp <- df_comp %>% mutate(DAMAGE_KPI = as.numeric(DAMAGE_KPI), STATE_FIPS = as.numeric(STATE_FIPS)) %>% filter(DAMAGE_KPI > 1)
str(df_comp)
df_comp2 <- left_join(df_comp, dfState, by = "STATE_FIPS")
df <- df_comp2
measures <- c("STATE_FIPS", "DAMAGE_CROPS", "DAMAGE_PROPERTY", "BEGIN_TIME", "END_TIME", "YEAR", "INJURIES_DIRECT", "INJURIES_INDIRECT", "DEATHS_DIRECT", "DEATHS_INDIRECT", "MAGNITUDE", "END", "BEGIN", "DAMAGE_KPI")
dimensions <- setdiff(names(df), measures)
library(lubridate)
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="null",replacement= "0"))
}
}
write.csv(df, paste(gsub(".csv", "", "AdamData"), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
df2011 <- df2011 %>% select(STATE_FIPS, DAMAGE_CROPS, DAMAGE_PROPERTY, BEGIN_TIME, END_TIME, YEAR, INJURIES_DIRECT, INJURIES_INDIRECT, DEATHS_DIRECT, DEATHS_INDIRECT, MAGNITUDE) %>% mutate(END = ((as.numeric(END_TIME) %% 100)/60*100 + (as.numeric(END_TIME) %/% 100 * 100)), BEGIN = ((as.numeric(BEGIN_TIME) %% 100)/60*100 + (as.numeric(BEGIN_TIME) %/% 100 * 100))) %>% mutate (DAMAGE_KPI = (as.numeric(DAMAGE_CROPS) + as.numeric(DAMAGE_PROPERTY)) / (END - BEGIN)) %>% filter(DAMAGE_KPI != "Inf", DAMAGE_KPI > 0)
View(df2011)
df2011 <- df2011 %>% select(STATE_FIPS, DAMAGE_CROPS, DAMAGE_PROPERTY, BEGIN_TIME, END_TIME, YEAR, INJURIES_DIRECT, INJURIES_INDIRECT, DEATHS_DIRECT, DEATHS_INDIRECT, MAGNITUDE) %>% mutate(END = ((as.numeric(END_TIME) %% 100)/60*100 + (as.numeric(END_TIME) %/% 100 * 100)), BEGIN = ((as.numeric(BEGIN_TIME) %% 100)/60*100 + (as.numeric(BEGIN_TIME) %/% 100 * 100))) %>% mutate (DAMAGE_KPI = (as.numeric(DAMAGE_CROPS) + as.numeric(DAMAGE_PROPERTY)) / (END - BEGIN)) %>% filter(DAMAGE_KPI != "Inf", DAMAGE_KPI > 0)
df2012 <- df2012 %>% select(STATE_FIPS, DAMAGE_CROPS, DAMAGE_PROPERTY, BEGIN_TIME, END_TIME, YEAR, INJURIES_DIRECT, INJURIES_INDIRECT, DEATHS_DIRECT, DEATHS_INDIRECT, MAGNITUDE) %>% mutate(END = ((as.numeric(END_TIME) %% 100)/60*100 + (as.numeric(END_TIME) %/% 100 * 100)), BEGIN = ((as.numeric(BEGIN_TIME) %% 100)/60*100 + (as.numeric(BEGIN_TIME) %/% 100 * 100))) %>% mutate (DAMAGE_KPI = (as.numeric(DAMAGE_CROPS) + as.numeric(DAMAGE_PROPERTY)) / (END - BEGIN)) %>% filter(DAMAGE_KPI != "Inf", DAMAGE_KPI > 0)
df2013 <- df2013 %>% select(STATE_FIPS, DAMAGE_CROPS, DAMAGE_PROPERTY, BEGIN_TIME, END_TIME, YEAR, INJURIES_DIRECT, INJURIES_INDIRECT, DEATHS_DIRECT, DEATHS_INDIRECT, MAGNITUDE) %>% mutate(END = ((as.numeric(END_TIME) %% 100)/60*100 + (as.numeric(END_TIME) %/% 100 * 100)), BEGIN = ((as.numeric(BEGIN_TIME) %% 100)/60*100 + (as.numeric(BEGIN_TIME) %/% 100 * 100))) %>% mutate (DAMAGE_KPI = (as.numeric(DAMAGE_CROPS) + as.numeric(DAMAGE_PROPERTY)) / (END - BEGIN)) %>% filter(DAMAGE_KPI != "Inf", DAMAGE_KPI > 0)
df2014 <- df2014 %>% select(STATE_FIPS, DAMAGE_CROPS, DAMAGE_PROPERTY, BEGIN_TIME, END_TIME, YEAR, INJURIES_DIRECT, INJURIES_INDIRECT, DEATHS_DIRECT, DEATHS_INDIRECT, MAGNITUDE) %>% mutate(END = ((as.numeric(END_TIME) %% 100)/60*100 + (as.numeric(END_TIME) %/% 100 * 100)), BEGIN = ((as.numeric(BEGIN_TIME) %% 100)/60*100 + (as.numeric(BEGIN_TIME) %/% 100 * 100))) %>% mutate (DAMAGE_KPI = (as.numeric(DAMAGE_CROPS) + as.numeric(DAMAGE_PROPERTY)) / (END - BEGIN)) %>% filter(DAMAGE_KPI != "Inf", DAMAGE_KPI > 0)
dfState <- read.csv("Fips.csv", stringsAsFactors = FALSE)
dfState <- dfState %>% mutate(STATE_FIPS = as.numeric(STATE_FIPS))
df_comp <- bind_rows(df2011, df2012, df2013, df2014)
df_comp <- df_comp %>% mutate(DAMAGE_KPI = as.numeric(DAMAGE_KPI), STATE_FIPS = as.numeric(STATE_FIPS)) %>% filter(DAMAGE_KPI > 1)
str(df_comp)
df_comp2 <- left_join(df_comp, dfState, by = "STATE_FIPS")
require(tidyr)
require(dplyr)
require(ggplot2)
df <- df_comp2
measures <- c("STATE_FIPS", "DAMAGE_CROPS", "DAMAGE_PROPERTY", "BEGIN_TIME", "END_TIME", "YEAR", "INJURIES_DIRECT", "INJURIES_INDIRECT", "DEATHS_DIRECT", "DEATHS_INDIRECT", "MAGNITUDE", "END", "BEGIN", "DAMAGE_KPI")
dimensions <- setdiff(names(df), measures)
library(lubridate)
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="null",replacement= "0"))
}
}
write.csv(df, paste(gsub(".csv", "", "AdamData"), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
df2015 <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from STORMEVENTS2015"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mew2795', PASS='orcl_mew2795', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
df2015 <- df2015 %>% select(STATE_FIPS, DAMAGE_CROPS, DAMAGE_PROPERTY, BEGIN_TIME, END_TIME, YEAR, INJURIES_DIRECT, INJURIES_INDIRECT, DEATHS_DIRECT, DEATHS_INDIRECT, MAGNITUDE) %>% mutate(END = ((as.numeric(END_TIME) %% 100)/60*100 + (as.numeric(END_TIME) %/% 100 * 100)), BEGIN = ((as.numeric(BEGIN_TIME) %% 100)/60*100 + (as.numeric(BEGIN_TIME) %/% 100 * 100))) %>% mutate (DAMAGE_KPI = (as.numeric(DAMAGE_CROPS) + as.numeric(DAMAGE_PROPERTY)) / (END - BEGIN)) %>% filter(DAMAGE_KPI != "Inf", DAMAGE_KPI > 0)
df_comp <- bind_rows(df2011, df2012, df2013, df2014)
df_comp <- df_comp %>% mutate(DAMAGE_KPI = as.numeric(DAMAGE_KPI), STATE_FIPS = as.numeric(STATE_FIPS)) %>% filter(DAMAGE_KPI > 1)
df_comp2 <- left_join(df_comp, dfState, by = "STATE_FIPS")
require(tidyr)
require(dplyr)
require(ggplot2)
df <- df_comp2
df_comp <- bind_rows(df2011, df2012, df2013, df2014, df2015)
df_comp <- df_comp %>% mutate(DAMAGE_KPI = as.numeric(DAMAGE_KPI), STATE_FIPS = as.numeric(STATE_FIPS)) %>% filter(DAMAGE_KPI > 1)
df_comp2 <- left_join(df_comp, dfState, by = "STATE_FIPS")
df <- df_comp2
measures <- c("STATE_FIPS", "DAMAGE_CROPS", "DAMAGE_PROPERTY", "BEGIN_TIME", "END_TIME", "YEAR", "INJURIES_DIRECT", "INJURIES_INDIRECT", "DEATHS_DIRECT", "DEATHS_INDIRECT", "MAGNITUDE", "END", "BEGIN", "DAMAGE_KPI")
dimensions <- setdiff(names(df), measures)
library(lubridate)
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="null",replacement= "0"))
}
}
write.csv(df, paste(gsub(".csv", "", "AdamData"), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
![](BoxPlot.png)
shiny::runApp('04 Shiny')
