{
    "contents" : "require(jsonlite)\nrequire(RCurl)\nrequire(ggplot2)\nrequire(dplyr)\nrequire(shiny)\nrequire(shinydashboard)\nrequire(leaflet)\nrequire(gridExtra)\nrequire(lubridate)\ndf <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query=\"select * from STORMEVENTS2011\"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mew2795', PASS='orcl_mew2795', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))\n\ndf2011 <- df\n\ndf2012 <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query=\"select * from STORMEVENTS2012\"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mew2795', PASS='orcl_mew2795', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))\n\ndf2013 <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query=\"select * from STORMEVENTS2013\"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mew2795', PASS='orcl_mew2795', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))\n\ndf2014 <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query=\"select * from STORMEVENTS2014\"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mew2795', PASS='orcl_mew2795', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))\n\ndf2011 <- df2011 %>% select(STATE_FIPS, DAMAGE_CROPS, DAMAGE_PROPERTY, BEGIN_TIME, END_TIME, YEAR, INJURIES_DIRECT, INJURIES_INDIRECT, DEATHS_DIRECT, DEATHS_INDIRECT, MAGNITUDE) %>% mutate(END = ((as.numeric(END_TIME) %% 100) + (as.numeric(END_TIME) %/% 100 * 100)), BEGIN = ((as.numeric(BEGIN_TIME) %% 100) + (as.numeric(BEGIN_TIME) %/% 100 * 100))) %>% mutate (DAMAGE_KPI = (as.numeric(DAMAGE_CROPS) + as.numeric(DAMAGE_PROPERTY)) / (END - BEGIN)) %>% filter(DAMAGE_KPI != \"Inf\", DAMAGE_KPI > 0)\n\ndf2012 <- df2012 %>% select(STATE_FIPS, DAMAGE_CROPS, DAMAGE_PROPERTY, BEGIN_TIME, END_TIME, YEAR, INJURIES_DIRECT, INJURIES_INDIRECT, DEATHS_DIRECT, DEATHS_INDIRECT, MAGNITUDE) %>% mutate(END = ((as.numeric(END_TIME) %% 100) + (as.numeric(END_TIME) %/% 100 * 100)), BEGIN = ((as.numeric(BEGIN_TIME) %% 100) + (as.numeric(BEGIN_TIME) %/% 100 * 100))) %>% mutate (DAMAGE_KPI = (as.numeric(DAMAGE_CROPS) + as.numeric(DAMAGE_PROPERTY)) / (END - BEGIN)) %>% filter(DAMAGE_KPI != \"Inf\", DAMAGE_KPI > 0)\n\ndf2013 <- df2013 %>% select(STATE_FIPS, DAMAGE_CROPS, DAMAGE_PROPERTY, BEGIN_TIME, END_TIME, YEAR, INJURIES_DIRECT, INJURIES_INDIRECT, DEATHS_DIRECT, DEATHS_INDIRECT, MAGNITUDE) %>% mutate(END = ((as.numeric(END_TIME) %% 100) + (as.numeric(END_TIME) %/% 100 * 100)), BEGIN = ((as.numeric(BEGIN_TIME) %% 100) + (as.numeric(BEGIN_TIME) %/% 100 * 100))) %>% mutate (DAMAGE_KPI = (as.numeric(DAMAGE_CROPS) + as.numeric(DAMAGE_PROPERTY)) / (END - BEGIN)) %>% filter(DAMAGE_KPI != \"Inf\", DAMAGE_KPI > 0)\n\ndf2014 <- df2014 %>% select(STATE_FIPS, DAMAGE_CROPS, DAMAGE_PROPERTY, BEGIN_TIME, END_TIME, YEAR, INJURIES_DIRECT, INJURIES_INDIRECT, DEATHS_DIRECT, DEATHS_INDIRECT, MAGNITUDE) %>% mutate(END = ((as.numeric(END_TIME) %% 100) + (as.numeric(END_TIME) %/% 100 * 100)), BEGIN = ((as.numeric(BEGIN_TIME) %% 100) + (as.numeric(BEGIN_TIME) %/% 100 * 100))) %>% mutate (DAMAGE_KPI = (as.numeric(DAMAGE_CROPS) + as.numeric(DAMAGE_PROPERTY)) / (END - BEGIN)) %>% filter(DAMAGE_KPI != \"Inf\", DAMAGE_KPI > 0)\n\ndfState <- read.csv(\"Fips.csv\", stringsAsFactors = FALSE)\ndfState <- dfState %>% mutate(STATE_FIPS = as.numeric(STATE_FIPS))\n\ndf_comp <- bind_rows(df2011, df2012, df2013, df2014)\n\ndf_comp <- df_comp %>% mutate(DAMAGE_KPI = as.numeric(DAMAGE_KPI), STATE_FIPS = as.numeric(STATE_FIPS)) %>% filter(DAMAGE_KPI > 1)\nstr(df_comp)\n\ndf_comp2 <- left_join(df_comp, dfState, by = \"STATE_FIPS\")\n\nrequire(tidyr)\nrequire(dplyr)\nrequire(ggplot2)\n\n\ndf <- df_comp2\n\nmeasures <- c(\"STATE_FIPS\", \"DAMAGE_CROPS\", \"DAMAGE_PROPERTY\", \"BEGIN_TIME\", \"END_TIME\", \"YEAR\", \"INJURIES_DIRECT\", \"INJURIES_INDIRECT\", \"DEATHS_DIRECT\", \"DEATHS_INDIRECT\", \"MAGNITUDE\", \"END\", \"BEGIN\", \"DAMAGE_KPI\")\n\ndimensions <- setdiff(names(df), measures)\n\n\nlibrary(lubridate)\n\nif( length(measures) > 1 || ! is.na(measures)) {\n  for(m in measures) {\n    df[m] <- data.frame(lapply(df[m], gsub, pattern=\"null\",replacement= \"0\"))\n  }\n}\n\n\nwrite.csv(df, paste(gsub(\".csv\", \"\", \"AdamData\"), \".reformatted.csv\", sep=\"\"), row.names=FALSE, na = \"\")\n\ntableName <- gsub(\" +\", \"_\", gsub(\"[^A-z, 0-9, ]\", \"\", gsub(\".csv\", \"\", \"AdamData\")))\nsql <- paste(\"CREATE TABLE\", \"AdamData\", \"(\\n-- Change table_name to the table name you want.\\n\")\nif( length(measures) > 1 || ! is.na(dimensions)) {\n  for(d in dimensions) {\n    sql <- paste(sql, paste(d, \"varchar2(4000),\\n\"))\n  }\n}\nif( length(measures) > 1 || ! is.na(measures)) {\n  for(m in measures) {\n    if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, \"number(38,4),\\n\"))\n    else sql <- paste(sql, paste(m, \"number(38,4)\\n\"))\n  }\n}\nsql <- paste(sql, \");\")\ncat(sql)\n\n\n\n\n\n",
    "created" : 1449442518731.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "707189449",
    "id" : "572E0929",
    "lastKnownWriteTime" : 1449453891,
    "path" : "~/DataVisualization/DV_FinalProject/01 Data/AScript.R",
    "project_path" : "01 Data/AScript.R",
    "properties" : {
        "tempName" : "Untitled2"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_source"
}